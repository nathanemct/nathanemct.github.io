{
  "desc": {
    "parameters": [
      {
        "type": "ParameterTypeNumber",
        "index": 0,
        "name": "autoOn",
        "paramId": "autoOn",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s11",
        "constrainFunc": "param_37_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 1,
        "name": "modeSelector",
        "paramId": "modeSelector",
        "minimum": 1,
        "maximum": 10,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s03",
        "constrainFunc": "param_38_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 2,
        "name": "waveSelect",
        "paramId": "waveSelect",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s16",
        "constrainFunc": "param_39_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 3,
        "name": "filterFrequency",
        "paramId": "filterFrequency",
        "minimum": 10,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s28",
        "constrainFunc": "param_40_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 4,
        "name": "modFreq1",
        "paramId": "modFreq1",
        "minimum": 0,
        "maximum": 10,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s15",
        "constrainFunc": "param_41_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 5,
        "name": "mult",
        "paramId": "mult",
        "minimum": 1,
        "maximum": 150,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s22",
        "constrainFunc": "param_42_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 6,
        "name": "modFreqDepth1",
        "paramId": "modFreqDepth1",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s13",
        "constrainFunc": "param_43_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 7,
        "name": "playback",
        "paramId": "playback",
        "minimum": 1000,
        "maximum": 7500,
        "exponent": 1,
        "steps": 0,
        "initialValue": 2000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s10",
        "constrainFunc": "param_44_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 8,
        "name": "outlow",
        "paramId": "outlow",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": -1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s20",
        "constrainFunc": "param_45_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 9,
        "name": "volumeGain",
        "paramId": "volumeGain",
        "minimum": 0,
        "maximum": 0.75,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.75,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s43",
        "constrainFunc": "param_46_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 10,
        "name": "mode",
        "paramId": "mode",
        "minimum": 0,
        "maximum": 0.2,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s18",
        "constrainFunc": "param_47_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 11,
        "name": "skewBrighten",
        "paramId": "skewBrighten",
        "minimum": 0,
        "maximum": 0.9,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s17",
        "constrainFunc": "param_48_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 12,
        "name": "delaytimeL",
        "paramId": "delaytimeL",
        "minimum": 1,
        "maximum": 950,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s24",
        "constrainFunc": "param_49_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 13,
        "name": "offsetDistort",
        "paramId": "offsetDistort",
        "minimum": -1,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s21",
        "constrainFunc": "param_50_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 14,
        "name": "modFreq2",
        "paramId": "modFreq2",
        "minimum": 0,
        "maximum": 6,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s14",
        "constrainFunc": "param_51_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 15,
        "name": "modFreqDepth2",
        "paramId": "modFreqDepth2",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s12",
        "constrainFunc": "param_52_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 16,
        "name": "delaytimeR",
        "paramId": "delaytimeR",
        "minimum": 1,
        "maximum": 1000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s23",
        "constrainFunc": "param_53_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 17,
        "name": "compressorRelease",
        "paramId": "compressorRelease",
        "minimum": 30,
        "maximum": 500,
        "exponent": 1,
        "steps": 0,
        "initialValue": 500,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s38",
        "constrainFunc": "param_54_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 18,
        "name": "compressorAttack",
        "paramId": "compressorAttack",
        "minimum": 0,
        "maximum": 20,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s37",
        "constrainFunc": "param_55_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 19,
        "name": "compressorRatio",
        "paramId": "compressorRatio",
        "minimum": 0,
        "maximum": 7,
        "exponent": 1,
        "steps": 0,
        "initialValue": 7,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s36",
        "constrainFunc": "param_56_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 20,
        "name": "compressorThreshold",
        "paramId": "compressorThreshold",
        "minimum": -37,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": -37,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s33",
        "constrainFunc": "param_57_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 21,
        "name": "compressorInputGain",
        "paramId": "compressorInputGain",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 0,
        "initialValue": 4,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s34",
        "constrainFunc": "param_58_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 22,
        "name": "compressorParallel_mix",
        "paramId": "compressorParallel_mix",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s39",
        "constrainFunc": "param_59_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 23,
        "name": "outhigh",
        "paramId": "outhigh",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s19",
        "constrainFunc": "param_60_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 24,
        "name": "attack",
        "paramId": "attack",
        "minimum": 20,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s32",
        "constrainFunc": "param_61_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 25,
        "name": "decay",
        "paramId": "decay",
        "minimum": 0,
        "maximum": 10000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 200,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s31",
        "constrainFunc": "param_62_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 26,
        "name": "sustain",
        "paramId": "sustain",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.2,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s30",
        "constrainFunc": "param_63_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 27,
        "name": "release",
        "paramId": "release",
        "minimum": 0,
        "maximum": 10000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 400,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s29",
        "constrainFunc": "param_64_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 28,
        "name": "rainAmount",
        "paramId": "rainAmount",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s26",
        "constrainFunc": "param_65_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 29,
        "name": "rainGain",
        "paramId": "rainGain",
        "minimum": 0,
        "maximum": 20,
        "exponent": 1,
        "steps": 0,
        "initialValue": 2,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s27",
        "constrainFunc": "param_66_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 30,
        "name": "rainDelayTime",
        "paramId": "rainDelayTime",
        "minimum": 1,
        "maximum": 2000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s25",
        "constrainFunc": "param_67_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 31,
        "name": "synthDelay",
        "paramId": "synthDelay",
        "minimum": 0,
        "maximum": 0.4,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "paramtilde_a1_s02"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 32,
        "name": "rainDelay",
        "paramId": "rainDelay",
        "minimum": 0,
        "maximum": 0.7,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "paramtilde_a1_s03"
      },
      {
        "type": "ParameterTypeSignal",
        "index": 33,
        "name": "synthDelay",
        "paramId": "/signals/synthDelay",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": "",
        "displayorder": "-",
        "sendinit": "",
        "initialized": false,
        "debug": false,
        "saveable": false,
        "transmittable": false,
        "visible": false,
        "signalIndex": 0,
        "ioType": "IOTypeInput"
      },
      {
        "type": "ParameterTypeSignal",
        "index": 34,
        "name": "rainDelay",
        "paramId": "/signals/rainDelay",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": "",
        "displayorder": "-",
        "sendinit": "",
        "initialized": false,
        "debug": false,
        "saveable": false,
        "transmittable": false,
        "visible": false,
        "signalIndex": 1,
        "ioType": "IOTypeInput"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 35,
        "name": "autoOn",
        "paramId": "poly/autoOn",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s10",
        "constrainFunc": "param_06_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 36,
        "name": "modeSelector",
        "paramId": "poly/modeSelector",
        "minimum": 1,
        "maximum": 10,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s02",
        "constrainFunc": "param_07_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 37,
        "name": "waveSelect",
        "paramId": "poly/waveSelect",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s15",
        "constrainFunc": "param_08_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 38,
        "name": "filterFrequency",
        "paramId": "poly/filterFrequency",
        "minimum": 10,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s27",
        "constrainFunc": "param_09_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 39,
        "name": "modFreq1",
        "paramId": "poly/modFreq1",
        "minimum": 0,
        "maximum": 10,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s14",
        "constrainFunc": "param_10_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 40,
        "name": "mult",
        "paramId": "poly/mult",
        "minimum": 1,
        "maximum": 150,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s21",
        "constrainFunc": "param_11_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 41,
        "name": "synthDelay",
        "paramId": "poly/synthDelay/value",
        "minimum": 0,
        "maximum": 0.4,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "paramtilde_a1_s01"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 42,
        "name": "modFreqDepth1",
        "paramId": "poly/modFreqDepth1",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s12",
        "constrainFunc": "param_12_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 43,
        "name": "playback",
        "paramId": "poly/playback",
        "minimum": 1000,
        "maximum": 7500,
        "exponent": 1,
        "steps": 0,
        "initialValue": 2000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s09",
        "constrainFunc": "param_13_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 44,
        "name": "outlow",
        "paramId": "poly/outlow",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": -1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s19",
        "constrainFunc": "param_14_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 45,
        "name": "volumeGain",
        "paramId": "poly/volumeGain",
        "minimum": 0,
        "maximum": 0.75,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.75,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s42",
        "constrainFunc": "param_15_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 46,
        "name": "mode",
        "paramId": "poly/mode",
        "minimum": 0,
        "maximum": 0.2,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s17",
        "constrainFunc": "param_16_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 47,
        "name": "skewBrighten",
        "paramId": "poly/skewBrighten",
        "minimum": 0,
        "maximum": 0.9,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s16",
        "constrainFunc": "param_17_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 48,
        "name": "delaytimeL",
        "paramId": "poly/delaytimeL",
        "minimum": 1,
        "maximum": 950,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s23",
        "constrainFunc": "param_18_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 49,
        "name": "offsetDistort",
        "paramId": "poly/offsetDistort",
        "minimum": -1,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s20",
        "constrainFunc": "param_19_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 50,
        "name": "modFreq2",
        "paramId": "poly/modFreq2",
        "minimum": 0,
        "maximum": 6,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s13",
        "constrainFunc": "param_20_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 51,
        "name": "modFreqDepth2",
        "paramId": "poly/modFreqDepth2",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s11",
        "constrainFunc": "param_21_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 52,
        "name": "delaytimeR",
        "paramId": "poly/delaytimeR",
        "minimum": 1,
        "maximum": 1000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s22",
        "constrainFunc": "param_22_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 53,
        "name": "compressorRelease",
        "paramId": "poly/compressorRelease",
        "minimum": 30,
        "maximum": 500,
        "exponent": 1,
        "steps": 0,
        "initialValue": 500,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s37",
        "constrainFunc": "param_23_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 54,
        "name": "compressorAttack",
        "paramId": "poly/compressorAttack",
        "minimum": 0,
        "maximum": 20,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s36",
        "constrainFunc": "param_24_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 55,
        "name": "compressorRatio",
        "paramId": "poly/compressorRatio",
        "minimum": 0,
        "maximum": 7,
        "exponent": 1,
        "steps": 0,
        "initialValue": 7,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s35",
        "constrainFunc": "param_25_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 56,
        "name": "compressorThreshold",
        "paramId": "poly/compressorThreshold",
        "minimum": -37,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": -37,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s32",
        "constrainFunc": "param_26_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 57,
        "name": "compressorInputGain",
        "paramId": "poly/compressorInputGain",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 0,
        "initialValue": 4,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s33",
        "constrainFunc": "param_27_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 58,
        "name": "compressorParallel_mix",
        "paramId": "poly/compressorParallel_mix",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s38",
        "constrainFunc": "param_28_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 59,
        "name": "outhigh",
        "paramId": "poly/outhigh",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s18",
        "constrainFunc": "param_29_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 60,
        "name": "attack",
        "paramId": "poly/attack",
        "minimum": 20,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s31",
        "constrainFunc": "param_30_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 61,
        "name": "decay",
        "paramId": "poly/decay",
        "minimum": 0,
        "maximum": 10000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 200,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s30",
        "constrainFunc": "param_31_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 62,
        "name": "sustain",
        "paramId": "poly/sustain",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.2,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s29",
        "constrainFunc": "param_32_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 63,
        "name": "release",
        "paramId": "poly/release",
        "minimum": 0,
        "maximum": 10000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 400,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s28",
        "constrainFunc": "param_33_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 64,
        "name": "rainAmount",
        "paramId": "poly/rainAmount",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s25",
        "constrainFunc": "param_34_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 65,
        "name": "rainGain",
        "paramId": "poly/rainGain",
        "minimum": 0,
        "maximum": 20,
        "exponent": 1,
        "steps": 0,
        "initialValue": 2,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s26",
        "constrainFunc": "param_35_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 66,
        "name": "rainDelay",
        "paramId": "poly/rainDelay/value",
        "minimum": 0,
        "maximum": 0.7,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "paramtilde_a1_s02"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 67,
        "name": "rainDelayTime",
        "paramId": "poly/rainDelayTime",
        "minimum": 1,
        "maximum": 2000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s24",
        "constrainFunc": "param_36_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 68,
        "name": "numberobj_01_value",
        "paramId": "poly/sequence/number_obj-2/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s01"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 69,
        "name": "res",
        "paramId": "poly/p_obj-11/res",
        "minimum": 0,
        "maximum": 1.8,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s01",
        "constrainFunc": "param_01_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 70,
        "name": "vca_ness",
        "paramId": "poly/p_obj-11/vca_ness",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s02",
        "constrainFunc": "param_02_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 71,
        "name": "offset",
        "paramId": "poly/p_obj-11/offset",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s03",
        "constrainFunc": "param_03_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 72,
        "name": "lp_mode",
        "paramId": "poly/p_obj-11/lp_mode",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "off",
          "on"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s04",
        "constrainFunc": "param_04_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 73,
        "name": "nonlin",
        "paramId": "poly/p_obj-11/nonlin",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "off",
          "on"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s05",
        "constrainFunc": "param_05_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 74,
        "name": "numberobj_02_value",
        "paramId": "poly/compressor[1]/number_obj-62/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s04"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 75,
        "name": "numberobj_03_value",
        "paramId": "poly/compressor[1]/flonum[2]/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s02"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 76,
        "name": "numberobj_04_value",
        "paramId": "poly/compressor[1]/flonum[3]/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s03"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 77,
        "name": "numberobj_05_value",
        "paramId": "poly/compressor[1]/flonum/value",
        "minimum": -96,
        "maximum": 0,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s05"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 78,
        "name": "numberobj_06_value",
        "paramId": "poly/compressor[1]/flonum[1]/value",
        "minimum": 1,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s01"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 79,
        "name": "numberobj_07_value",
        "paramId": "poly/compressor/number_obj-62/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s04"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 80,
        "name": "numberobj_08_value",
        "paramId": "poly/compressor/flonum[2]/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s02"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 81,
        "name": "numberobj_09_value",
        "paramId": "poly/compressor/flonum[3]/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s03"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 82,
        "name": "numberobj_10_value",
        "paramId": "poly/compressor/flonum/value",
        "minimum": -96,
        "maximum": 0,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s05"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 83,
        "name": "numberobj_11_value",
        "paramId": "poly/compressor/flonum[1]/value",
        "minimum": 1,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s01"
      }
    ],
    "numParameters": 84,
    "numSignalInParameters": 2,
    "numSignalOutParameters": 0,
    "numInputChannels": 0,
    "numOutputChannels": 2,
    "numMidiInputPorts": 1,
    "numMidiOutputPorts": 0,
    "externalDataRefs": [],
    "patcherSerial": 0,
    "inports": [],
    "outports": [
      {
        "tag": "out3",
        "meta": ""
      }
    ],
    "inlets": [
      {
        "type": "midi"
      }
    ],
    "outlets": [
      {
        "type": "signal",
        "index": 1,
        "tag": "out1",
        "meta": ""
      },
      {
        "type": "signal",
        "index": 2,
        "tag": "out2",
        "meta": ""
      },
      {
        "type": "event",
        "index": 3,
        "tag": "out3",
        "meta": ""
      }
    ],
    "paramConversion": {
      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 2:\n    case 6:\n    case 8:\n    case 15:\n    case 22:\n    case 23:\n    case 26:\n    case 28:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 21:\n        {\n            value = (value < 0 ? 0 : (value > 4 ? 4 : value));\n            let normalizedValue = (value - 0) / (4 - 0);\n            return normalizedValue;\n        }\n    case 14:\n        {\n            value = (value < 0 ? 0 : (value > 6 ? 6 : value));\n            let normalizedValue = (value - 0) / (6 - 0);\n            return normalizedValue;\n        }\n    case 19:\n        {\n            value = (value < 0 ? 0 : (value > 7 ? 7 : value));\n            let normalizedValue = (value - 0) / (7 - 0);\n            return normalizedValue;\n        }\n    case 4:\n        {\n            value = (value < 0 ? 0 : (value > 10 ? 10 : value));\n            let normalizedValue = (value - 0) / (10 - 0);\n            return normalizedValue;\n        }\n    case 18:\n    case 29:\n        {\n            value = (value < 0 ? 0 : (value > 20 ? 20 : value));\n            let normalizedValue = (value - 0) / (20 - 0);\n            return normalizedValue;\n        }\n    case 25:\n    case 27:\n        {\n            value = (value < 0 ? 0 : (value > 10000 ? 10000 : value));\n            let normalizedValue = (value - 0) / (10000 - 0);\n            return normalizedValue;\n        }\n    case 9:\n        {\n            value = (value < 0 ? 0 : (value > 0.75 ? 0.75 : value));\n            let normalizedValue = (value - 0) / (0.75 - 0);\n            return normalizedValue;\n        }\n    case 10:\n        {\n            value = (value < 0 ? 0 : (value > 0.2 ? 0.2 : value));\n            let normalizedValue = (value - 0) / (0.2 - 0);\n            return normalizedValue;\n        }\n    case 11:\n        {\n            value = (value < 0 ? 0 : (value > 0.9 ? 0.9 : value));\n            let normalizedValue = (value - 0) / (0.9 - 0);\n            return normalizedValue;\n        }\n    case 31:\n        {\n            value = (value < 0 ? 0 : (value > 0.4 ? 0.4 : value));\n            let normalizedValue = (value - 0) / (0.4 - 0);\n            return normalizedValue;\n        }\n    case 32:\n        {\n            value = (value < 0 ? 0 : (value > 0.7 ? 0.7 : value));\n            let normalizedValue = (value - 0) / (0.7 - 0);\n            return normalizedValue;\n        }\n    case 1:\n        {\n            value = (value < 1 ? 1 : (value > 10 ? 10 : value));\n            let normalizedValue = (value - 1) / (10 - 1);\n            return normalizedValue;\n        }\n    case 5:\n        {\n            value = (value < 1 ? 1 : (value > 150 ? 150 : value));\n            let normalizedValue = (value - 1) / (150 - 1);\n            return normalizedValue;\n        }\n    case 12:\n        {\n            value = (value < 1 ? 1 : (value > 950 ? 950 : value));\n            let normalizedValue = (value - 1) / (950 - 1);\n            return normalizedValue;\n        }\n    case 16:\n        {\n            value = (value < 1 ? 1 : (value > 1000 ? 1000 : value));\n            let normalizedValue = (value - 1) / (1000 - 1);\n            return normalizedValue;\n        }\n    case 30:\n        {\n            value = (value < 1 ? 1 : (value > 2000 ? 2000 : value));\n            let normalizedValue = (value - 1) / (2000 - 1);\n            return normalizedValue;\n        }\n    case 3:\n        {\n            value = (value < 10 ? 10 : (value > 20000 ? 20000 : value));\n            let normalizedValue = (value - 10) / (20000 - 10);\n            return normalizedValue;\n        }\n    case 24:\n        {\n            value = (value < 20 ? 20 : (value > 5000 ? 5000 : value));\n            let normalizedValue = (value - 20) / (5000 - 20);\n            return normalizedValue;\n        }\n    case 17:\n        {\n            value = (value < 30 ? 30 : (value > 500 ? 500 : value));\n            let normalizedValue = (value - 30) / (500 - 30);\n            return normalizedValue;\n        }\n    case 7:\n        {\n            value = (value < 1000 ? 1000 : (value > 7500 ? 7500 : value));\n            let normalizedValue = (value - 1000) / (7500 - 1000);\n            return normalizedValue;\n        }\n    case 13:\n        {\n            value = (value < -1 ? -1 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - -1) / (1 - -1);\n            return normalizedValue;\n        }\n    case 20:\n        {\n            value = (value < -37 ? -37 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - -37) / (1 - -37);\n            return normalizedValue;\n        }\n    default:\n        index -= 35;\n\n        if (index < this.poly[0].getNumParameters()) {\n            {\n                return this.poly[0].convertToNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 2:\n    case 6:\n    case 8:\n    case 15:\n    case 22:\n    case 23:\n    case 26:\n    case 28:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 21:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (4 - 0);\n            }\n        }\n    case 14:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (6 - 0);\n            }\n        }\n    case 19:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (7 - 0);\n            }\n        }\n    case 4:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (10 - 0);\n            }\n        }\n    case 18:\n    case 29:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (20 - 0);\n            }\n        }\n    case 25:\n    case 27:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (10000 - 0);\n            }\n        }\n    case 9:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (0.75 - 0);\n            }\n        }\n    case 10:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (0.2 - 0);\n            }\n        }\n    case 11:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (0.9 - 0);\n            }\n        }\n    case 31:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (0.4 - 0);\n            }\n        }\n    case 32:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (0.7 - 0);\n            }\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1 + value * (10 - 1);\n            }\n        }\n    case 5:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1 + value * (150 - 1);\n            }\n        }\n    case 12:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1 + value * (950 - 1);\n            }\n        }\n    case 16:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1 + value * (1000 - 1);\n            }\n        }\n    case 30:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1 + value * (2000 - 1);\n            }\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 10 + value * (20000 - 10);\n            }\n        }\n    case 24:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 20 + value * (5000 - 20);\n            }\n        }\n    case 17:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 30 + value * (500 - 30);\n            }\n        }\n    case 7:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1000 + value * (7500 - 1000);\n            }\n        }\n    case 13:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return -1 + value * (1 - -1);\n            }\n        }\n    case 20:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return -37 + value * (1 - -37);\n            }\n        }\n    default:\n        index -= 35;\n\n        if (index < this.poly[0].getNumParameters()) {\n            {\n                return this.poly[0].convertFromNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
      "getNumParameters": "function getNumParameters() {\n    return 35 + this.poly[0].getNumParameters();\n}",
      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 10 ? 10 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 20000 ? 20000 : (v < 10 ? 10 : v));\n            return v;\n        }\n    case 4:\n        {\n            v = (v > 10 ? 10 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 5:\n        {\n            v = (v > 150 ? 150 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 6:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 7:\n        {\n            v = (v > 7500 ? 7500 : (v < 1000 ? 1000 : v));\n            return v;\n        }\n    case 8:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 9:\n        {\n            v = (v > 0.75 ? 0.75 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 10:\n        {\n            v = (v > 0.2 ? 0.2 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 11:\n        {\n            v = (v > 0.9 ? 0.9 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 12:\n        {\n            v = (v > 950 ? 950 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 13:\n        {\n            v = (v > 1 ? 1 : (v < -1 ? -1 : v));\n            return v;\n        }\n    case 14:\n        {\n            v = (v > 6 ? 6 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 15:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 16:\n        {\n            v = (v > 1000 ? 1000 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 17:\n        {\n            v = (v > 500 ? 500 : (v < 30 ? 30 : v));\n            return v;\n        }\n    case 18:\n        {\n            v = (v > 20 ? 20 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 19:\n        {\n            v = (v > 7 ? 7 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 20:\n        {\n            v = (v > 1 ? 1 : (v < -37 ? -37 : v));\n            return v;\n        }\n    case 21:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 22:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 23:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 24:\n        {\n            v = (v > 5000 ? 5000 : (v < 20 ? 20 : v));\n            return v;\n        }\n    case 25:\n        {\n            v = (v > 10000 ? 10000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 26:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 27:\n        {\n            v = (v > 10000 ? 10000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 28:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 29:\n        {\n            v = (v > 20 ? 20 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 30:\n        {\n            v = (v > 2000 ? 2000 : (v < 1 ? 1 : v));\n            return v;\n        }\n    default:\n        index -= 35;\n\n        if (index < this.poly[0].getNumParameters()) {\n            {\n                return this.poly[0].constrainParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
      "subpatches": {
        "poly": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 2:\n    case 7:\n    case 9:\n    case 16:\n    case 23:\n    case 24:\n    case 27:\n    case 29:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 22:\n        {\n            value = (value < 0 ? 0 : (value > 4 ? 4 : value));\n            let normalizedValue = (value - 0) / (4 - 0);\n            return normalizedValue;\n        }\n    case 15:\n        {\n            value = (value < 0 ? 0 : (value > 6 ? 6 : value));\n            let normalizedValue = (value - 0) / (6 - 0);\n            return normalizedValue;\n        }\n    case 20:\n        {\n            value = (value < 0 ? 0 : (value > 7 ? 7 : value));\n            let normalizedValue = (value - 0) / (7 - 0);\n            return normalizedValue;\n        }\n    case 4:\n        {\n            value = (value < 0 ? 0 : (value > 10 ? 10 : value));\n            let normalizedValue = (value - 0) / (10 - 0);\n            return normalizedValue;\n        }\n    case 19:\n    case 30:\n        {\n            value = (value < 0 ? 0 : (value > 20 ? 20 : value));\n            let normalizedValue = (value - 0) / (20 - 0);\n            return normalizedValue;\n        }\n    case 26:\n    case 28:\n        {\n            value = (value < 0 ? 0 : (value > 10000 ? 10000 : value));\n            let normalizedValue = (value - 0) / (10000 - 0);\n            return normalizedValue;\n        }\n    case 6:\n        {\n            value = (value < 0 ? 0 : (value > 0.4 ? 0.4 : value));\n            let normalizedValue = (value - 0) / (0.4 - 0);\n            return normalizedValue;\n        }\n    case 10:\n        {\n            value = (value < 0 ? 0 : (value > 0.75 ? 0.75 : value));\n            let normalizedValue = (value - 0) / (0.75 - 0);\n            return normalizedValue;\n        }\n    case 11:\n        {\n            value = (value < 0 ? 0 : (value > 0.2 ? 0.2 : value));\n            let normalizedValue = (value - 0) / (0.2 - 0);\n            return normalizedValue;\n        }\n    case 12:\n        {\n            value = (value < 0 ? 0 : (value > 0.9 ? 0.9 : value));\n            let normalizedValue = (value - 0) / (0.9 - 0);\n            return normalizedValue;\n        }\n    case 31:\n        {\n            value = (value < 0 ? 0 : (value > 0.7 ? 0.7 : value));\n            let normalizedValue = (value - 0) / (0.7 - 0);\n            return normalizedValue;\n        }\n    case 1:\n        {\n            value = (value < 1 ? 1 : (value > 10 ? 10 : value));\n            let normalizedValue = (value - 1) / (10 - 1);\n            return normalizedValue;\n        }\n    case 5:\n        {\n            value = (value < 1 ? 1 : (value > 150 ? 150 : value));\n            let normalizedValue = (value - 1) / (150 - 1);\n            return normalizedValue;\n        }\n    case 13:\n        {\n            value = (value < 1 ? 1 : (value > 950 ? 950 : value));\n            let normalizedValue = (value - 1) / (950 - 1);\n            return normalizedValue;\n        }\n    case 17:\n        {\n            value = (value < 1 ? 1 : (value > 1000 ? 1000 : value));\n            let normalizedValue = (value - 1) / (1000 - 1);\n            return normalizedValue;\n        }\n    case 32:\n        {\n            value = (value < 1 ? 1 : (value > 2000 ? 2000 : value));\n            let normalizedValue = (value - 1) / (2000 - 1);\n            return normalizedValue;\n        }\n    case 3:\n        {\n            value = (value < 10 ? 10 : (value > 20000 ? 20000 : value));\n            let normalizedValue = (value - 10) / (20000 - 10);\n            return normalizedValue;\n        }\n    case 25:\n        {\n            value = (value < 20 ? 20 : (value > 5000 ? 5000 : value));\n            let normalizedValue = (value - 20) / (5000 - 20);\n            return normalizedValue;\n        }\n    case 18:\n        {\n            value = (value < 30 ? 30 : (value > 500 ? 500 : value));\n            let normalizedValue = (value - 30) / (500 - 30);\n            return normalizedValue;\n        }\n    case 8:\n        {\n            value = (value < 1000 ? 1000 : (value > 7500 ? 7500 : value));\n            let normalizedValue = (value - 1000) / (7500 - 1000);\n            return normalizedValue;\n        }\n    case 14:\n        {\n            value = (value < -1 ? -1 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - -1) / (1 - -1);\n            return normalizedValue;\n        }\n    case 21:\n        {\n            value = (value < -37 ? -37 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - -37) / (1 - -37);\n            return normalizedValue;\n        }\n    default:\n        index -= 33;\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_04.getNumParameters();\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 2:\n    case 7:\n    case 9:\n    case 16:\n    case 23:\n    case 24:\n    case 27:\n    case 29:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 22:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (4 - 0);\n            }\n        }\n    case 15:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (6 - 0);\n            }\n        }\n    case 20:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (7 - 0);\n            }\n        }\n    case 4:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (10 - 0);\n            }\n        }\n    case 19:\n    case 30:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (20 - 0);\n            }\n        }\n    case 26:\n    case 28:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (10000 - 0);\n            }\n        }\n    case 6:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (0.4 - 0);\n            }\n        }\n    case 10:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (0.75 - 0);\n            }\n        }\n    case 11:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (0.2 - 0);\n            }\n        }\n    case 12:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (0.9 - 0);\n            }\n        }\n    case 31:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (0.7 - 0);\n            }\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1 + value * (10 - 1);\n            }\n        }\n    case 5:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1 + value * (150 - 1);\n            }\n        }\n    case 13:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1 + value * (950 - 1);\n            }\n        }\n    case 17:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1 + value * (1000 - 1);\n            }\n        }\n    case 32:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1 + value * (2000 - 1);\n            }\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 10 + value * (20000 - 10);\n            }\n        }\n    case 25:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 20 + value * (5000 - 20);\n            }\n        }\n    case 18:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 30 + value * (500 - 30);\n            }\n        }\n    case 8:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1000 + value * (7500 - 1000);\n            }\n        }\n    case 14:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return -1 + value * (1 - -1);\n            }\n        }\n    case 21:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return -37 + value * (1 - -37);\n            }\n        }\n    default:\n        index -= 33;\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_04.getNumParameters();\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 33 + this.p_02.getNumParameters() + this.p_03.getNumParameters() + this.p_04.getNumParameters() + this.p_05.getNumParameters() + this.p_06.getNumParameters() + this.p_07.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 10 ? 10 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 20000 ? 20000 : (v < 10 ? 10 : v));\n            return v;\n        }\n    case 4:\n        {\n            v = (v > 10 ? 10 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 5:\n        {\n            v = (v > 150 ? 150 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 7:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 8:\n        {\n            v = (v > 7500 ? 7500 : (v < 1000 ? 1000 : v));\n            return v;\n        }\n    case 9:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 10:\n        {\n            v = (v > 0.75 ? 0.75 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 11:\n        {\n            v = (v > 0.2 ? 0.2 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 12:\n        {\n            v = (v > 0.9 ? 0.9 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 13:\n        {\n            v = (v > 950 ? 950 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 14:\n        {\n            v = (v > 1 ? 1 : (v < -1 ? -1 : v));\n            return v;\n        }\n    case 15:\n        {\n            v = (v > 6 ? 6 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 16:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 17:\n        {\n            v = (v > 1000 ? 1000 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 18:\n        {\n            v = (v > 500 ? 500 : (v < 30 ? 30 : v));\n            return v;\n        }\n    case 19:\n        {\n            v = (v > 20 ? 20 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 20:\n        {\n            v = (v > 7 ? 7 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 21:\n        {\n            v = (v > 1 ? 1 : (v < -37 ? -37 : v));\n            return v;\n        }\n    case 22:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 23:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 24:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 25:\n        {\n            v = (v > 5000 ? 5000 : (v < 20 ? 20 : v));\n            return v;\n        }\n    case 26:\n        {\n            v = (v > 10000 ? 10000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 27:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 28:\n        {\n            v = (v > 10000 ? 10000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 29:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 30:\n        {\n            v = (v > 20 ? 20 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 32:\n        {\n            v = (v > 2000 ? 2000 : (v < 1 ? 1 : v));\n            return v;\n        }\n    default:\n        index -= 33;\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.constrainParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.constrainParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.constrainParameterValue(index, value);\n\n        index -= this.p_04.getNumParameters();\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.constrainParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.constrainParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_02": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 1;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_03": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 1:\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 3:\n    case 4:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\n            }\n\n            return normalizedValue;\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1.8 ? 1.8 : value));\n            let normalizedValue = (value - 0) / (1.8 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 5;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 1:\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 3:\n    case 4:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\n            }\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1.8 - 0);\n            }\n        }\n    default:\n        index -= 5;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 5 + this.p_01.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1.8 ? 1.8 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 1;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 4:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 1;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    default:\n        index -= 5;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_01": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_04": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_05": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 4:\n        {\n            value = (value < 1 ? 1 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 1) / (1 - 1);\n            return normalizedValue;\n        }\n    case 3:\n        {\n            value = (value < -96 ? -96 : (value > 0 ? 0 : value));\n            let normalizedValue = (value - -96) / (0 - -96);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 4:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1 + value * (1 - 1);\n            }\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return -96 + value * (0 - -96);\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 5;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_06": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 4:\n        {\n            value = (value < 1 ? 1 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 1) / (1 - 1);\n            return normalizedValue;\n        }\n    case 3:\n        {\n            value = (value < -96 ? -96 : (value > 0 ? 0 : value));\n            let normalizedValue = (value - -96) / (0 - -96);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 4:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1 + value * (1 - 1);\n            }\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return -96 + value * (0 - -96);\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 5;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_07": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": true
        }
      },
      "isPolyphonic": false
    },
    "presetid": "rnbo",
    "meta": {
      "architecture": "x64",
      "filename": "main.maxpat",
      "maxversion": "8.5.2",
      "rnboversion": "1.0.2"
    }
  },
  "presets": [
    {
      "name": "1-2[1]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 208.70625
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 2115
        },
        "delaytimeL": {
          "value": 874
        },
        "delaytimeR": {
          "value": 920
        },
        "filterFrequency": {
          "value": 20000
        },
        "modFreq1": {
          "value": 5.714285714285714
        },
        "modFreq2": {
          "value": 3.428571428571428
        },
        "modFreqDepth1": {
          "value": 0.571428571428571
        },
        "modFreqDepth2": {
          "value": 0.166666666666667
        },
        "mode": {
          "value": 0.10707
        },
        "modeSelector": {
          "value": 1
        },
        "mult": {
          "value": 39.24333333333334
        },
        "playback": {
          "value": 6720.588235294117
        },
        "rainDelayTime": {
          "value": 1
        },
        "rainGain": {
          "value": 0
        },
        "release": {
          "value": 2115
        },
        "skewBrighten": {
          "value": 0.9
        },
        "sustain": {
          "value": 0.73
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.142857142857143
        }
      }
    },
    {
      "name": "1-16[2]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.266666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.266666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.266666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.266666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 170.35000000000002
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 1053
        },
        "delaytimeL": {
          "value": 874
        },
        "delaytimeR": {
          "value": 920
        },
        "filterFrequency": {
          "value": 10770.000000000002
        },
        "modFreq1": {
          "value": 5.714285714285714
        },
        "modFreq2": {
          "value": 3.428571428571428
        },
        "modFreqDepth1": {
          "value": 0.571428571428571
        },
        "modFreqDepth2": {
          "value": 0.333333333333333
        },
        "mode": {
          "value": 0.09697
        },
        "modeSelector": {
          "value": 1
        },
        "mult": {
          "value": 24.659393939393944
        },
        "playback": {
          "value": 5388.235294117647
        },
        "rainDelayTime": {
          "value": 1
        },
        "rainGain": {
          "value": 0
        },
        "release": {
          "value": 1053
        },
        "skewBrighten": {
          "value": 0.9
        },
        "sustain": {
          "value": 0.406
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.142857142857143
        }
      }
    },
    {
      "name": "1-2[3]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.333333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.333333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.333333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.333333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 99.45625
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 974.3333333333334
        },
        "delaytimeL": {
          "value": 874
        },
        "delaytimeR": {
          "value": 920
        },
        "filterFrequency": {
          "value": 9730.000000000002
        },
        "modFreq1": {
          "value": 4.285714285714286
        },
        "modFreq2": {
          "value": 2.571428571428571
        },
        "modFreqDepth1": {
          "value": 0.428571428571429
        },
        "modFreqDepth2": {
          "value": 0.333333333333333
        },
        "mode": {
          "value": 0.04515
        },
        "modeSelector": {
          "value": 1
        },
        "mult": {
          "value": 1
        },
        "playback": {
          "value": 2794.1176470588234
        },
        "rainDelayTime": {
          "value": 1
        },
        "rainGain": {
          "value": 0
        },
        "release": {
          "value": 974.3333333333334
        },
        "skewBrighten": {
          "value": 0.9
        },
        "sustain": {
          "value": 0.382
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.142857142857143
        }
      }
    },
    {
      "name": "5-1[4]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.066666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.066666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.066666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.066666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 272.475
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 50
        },
        "delaytimeL": {
          "value": 437
        },
        "delaytimeR": {
          "value": 460
        },
        "filterFrequency": {
          "value": 2450
        },
        "modFreq1": {
          "value": 0
        },
        "modFreq2": {
          "value": 0
        },
        "modFreqDepth1": {
          "value": 0
        },
        "modFreqDepth2": {
          "value": 0.166666666666667
        },
        "mode": {
          "value": 0.09897
        },
        "modeSelector": {
          "value": 5
        },
        "mult": {
          "value": 63.489696969696965
        },
        "playback": {
          "value": 7500
        },
        "rainDelayTime": {
          "value": 1
        },
        "rainGain": {
          "value": 0
        },
        "release": {
          "value": 50
        },
        "skewBrighten": {
          "value": 0.9
        },
        "sustain": {
          "value": 0.1
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.714285714285714
        }
      }
    },
    {
      "name": "5-14[5]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.133333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.133333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.133333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.133333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 270.21875
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 1780.6666666666667
        },
        "delaytimeL": {
          "value": 437
        },
        "delaytimeR": {
          "value": 460
        },
        "filterFrequency": {
          "value": 8300
        },
        "modFreq1": {
          "value": 0
        },
        "modFreq2": {
          "value": 0
        },
        "modFreqDepth1": {
          "value": 0
        },
        "modFreqDepth2": {
          "value": 0.166666666666667
        },
        "mode": {
          "value": 0.10231
        },
        "modeSelector": {
          "value": 5
        },
        "mult": {
          "value": 62.631818181818176
        },
        "playback": {
          "value": 7500
        },
        "rainDelayTime": {
          "value": 200
        },
        "rainGain": {
          "value": 2
        },
        "release": {
          "value": 1780.6666666666667
        },
        "skewBrighten": {
          "value": 0.9
        },
        "sustain": {
          "value": 0.628
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.714285714285714
        }
      }
    },
    {
      "name": "1-76[6]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.733333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.733333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.733333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.733333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 78.79375000000002
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 89.33333333333334
        },
        "delaytimeL": {
          "value": 874
        },
        "delaytimeR": {
          "value": 920
        },
        "filterFrequency": {
          "value": 1020
        },
        "modFreq1": {
          "value": 5.714285714285714
        },
        "modFreq2": {
          "value": 3.428571428571428
        },
        "modFreqDepth1": {
          "value": 0.571428571428571
        },
        "modFreqDepth2": {
          "value": 0.666666666666667
        },
        "mode": {
          "value": 0.0711
        },
        "modeSelector": {
          "value": 1
        },
        "mult": {
          "value": 1
        },
        "playback": {
          "value": 2835.2941176470586
        },
        "rainDelayTime": {
          "value": 460
        },
        "rainGain": {
          "value": 4.600000000000001
        },
        "release": {
          "value": 89.33333333333334
        },
        "skewBrighten": {
          "value": 0
        },
        "sustain": {
          "value": 0.112
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.142857142857143
        }
      }
    },
    {
      "name": "2-4[7]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 112.28125
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 935.0000000000001
        },
        "delaytimeL": {
          "value": 475
        },
        "delaytimeR": {
          "value": 500
        },
        "filterFrequency": {
          "value": 9275
        },
        "modFreq1": {
          "value": 5.714285714285714
        },
        "modFreq2": {
          "value": 3.428571428571428
        },
        "modFreqDepth1": {
          "value": 0.571428571428571
        },
        "modFreqDepth2": {
          "value": 0.5
        },
        "mode": {
          "value": 0.0248
        },
        "modeSelector": {
          "value": 2
        },
        "mult": {
          "value": 2.580303030303029
        },
        "playback": {
          "value": 2494.1176470588234
        },
        "rainDelayTime": {
          "value": 1100
        },
        "rainGain": {
          "value": 11
        },
        "release": {
          "value": 935.0000000000001
        },
        "skewBrighten": {
          "value": 0.9
        },
        "sustain": {
          "value": 0.37
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.285714285714286
        }
      }
    },
    {
      "name": "2-39[8]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.466666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.466666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.466666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.466666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 90.075
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 227
        },
        "delaytimeL": {
          "value": 475
        },
        "delaytimeR": {
          "value": 500
        },
        "filterFrequency": {
          "value": 2385
        },
        "modFreq1": {
          "value": 4.285714285714286
        },
        "modFreq2": {
          "value": 2.571428571428571
        },
        "modFreqDepth1": {
          "value": 0.428571428571429
        },
        "modFreqDepth2": {
          "value": 0.666666666666667
        },
        "mode": {
          "value": 0.01653
        },
        "modeSelector": {
          "value": 2
        },
        "mult": {
          "value": 1
        },
        "playback": {
          "value": 2235.294117647059
        },
        "rainDelayTime": {
          "value": 540
        },
        "rainGain": {
          "value": 5.4
        },
        "release": {
          "value": 227
        },
        "skewBrighten": {
          "value": 0.333333333333333
        },
        "sustain": {
          "value": 0.154
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.285714285714286
        }
      }
    },
    {
      "name": "5-6[9]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.066666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.066666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.066666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.066666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 272.475
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 423.6666666666667
        },
        "delaytimeL": {
          "value": 437
        },
        "delaytimeR": {
          "value": 460
        },
        "filterFrequency": {
          "value": 3035
        },
        "modFreq1": {
          "value": 0
        },
        "modFreq2": {
          "value": 0
        },
        "modFreqDepth1": {
          "value": 0
        },
        "modFreqDepth2": {
          "value": 0.166666666666667
        },
        "mode": {
          "value": 0.09897
        },
        "modeSelector": {
          "value": 5
        },
        "mult": {
          "value": 63.489696969696965
        },
        "playback": {
          "value": 7500
        },
        "rainDelayTime": {
          "value": 1
        },
        "rainGain": {
          "value": 0
        },
        "release": {
          "value": 423.6666666666667
        },
        "skewBrighten": {
          "value": 0.9
        },
        "sustain": {
          "value": 0.214
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.714285714285714
        }
      }
    },
    {
      "name": "6-78[10]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.8
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.8
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.8
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.8
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 146.00625
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 89.33333333333334
        },
        "delaytimeL": {
          "value": 380
        },
        "delaytimeR": {
          "value": 400
        },
        "filterFrequency": {
          "value": 1020
        },
        "modFreq1": {
          "value": 4.285714285714286
        },
        "modFreq2": {
          "value": 2.571428571428571
        },
        "modFreqDepth1": {
          "value": 0.428571428571429
        },
        "modFreqDepth2": {
          "value": 0.833333333333333
        },
        "mode": {
          "value": 0.03055
        },
        "modeSelector": {
          "value": 6
        },
        "mult": {
          "value": 15.40333333333333
        },
        "playback": {
          "value": 2882.3529411764703
        },
        "rainDelayTime": {
          "value": 1
        },
        "rainGain": {
          "value": 0
        },
        "release": {
          "value": 89.33333333333334
        },
        "skewBrighten": {
          "value": 0
        },
        "sustain": {
          "value": 0.112
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.857142857142857
        }
      }
    },
    {
      "name": "2-24[11]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.333333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.333333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.333333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.333333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 96.01250000000002
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 502.33333333333337
        },
        "delaytimeL": {
          "value": 475
        },
        "delaytimeR": {
          "value": 500
        },
        "filterFrequency": {
          "value": 4920
        },
        "modFreq1": {
          "value": 4.285714285714286
        },
        "modFreq2": {
          "value": 2.571428571428571
        },
        "modFreqDepth1": {
          "value": 0.428571428571429
        },
        "modFreqDepth2": {
          "value": 0.5
        },
        "mode": {
          "value": 0.02446
        },
        "modeSelector": {
          "value": 2
        },
        "mult": {
          "value": 1
        },
        "playback": {
          "value": 2352.9411764705883
        },
        "rainDelayTime": {
          "value": 1800
        },
        "rainGain": {
          "value": 18
        },
        "release": {
          "value": 502.33333333333337
        },
        "skewBrighten": {
          "value": 0.9
        },
        "sustain": {
          "value": 0.238
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.285714285714286
        }
      }
    },
    {
      "name": "2-68[12]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.666666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.666666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.666666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.666666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 86.98750000000001
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 50
        },
        "delaytimeL": {
          "value": 475
        },
        "delaytimeR": {
          "value": 500
        },
        "filterFrequency": {
          "value": 630
        },
        "modFreq1": {
          "value": 2.857142857142857
        },
        "modFreq2": {
          "value": 1.714285714285714
        },
        "modFreqDepth1": {
          "value": 0.285714285714286
        },
        "modFreqDepth2": {
          "value": 0.833333333333333
        },
        "mode": {
          "value": 0.03397
        },
        "modeSelector": {
          "value": 2
        },
        "mult": {
          "value": 1
        },
        "playback": {
          "value": 2485.2941176470586
        },
        "rainDelayTime": {
          "value": 280
        },
        "rainGain": {
          "value": 2.8
        },
        "release": {
          "value": 50
        },
        "skewBrighten": {
          "value": 0
        },
        "sustain": {
          "value": 0.1
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.285714285714286
        }
      }
    },
    {
      "name": "3-59[13]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.6
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.6
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.6
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.6
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 58.60625
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 246.66666666666666
        },
        "delaytimeL": {
          "value": 665.0000000000001
        },
        "delaytimeR": {
          "value": 700.0000000000001
        },
        "filterFrequency": {
          "value": 2320
        },
        "modFreq1": {
          "value": 4.285714285714286
        },
        "modFreq2": {
          "value": 2.571428571428571
        },
        "modFreqDepth1": {
          "value": 0.428571428571429
        },
        "modFreqDepth2": {
          "value": 1
        },
        "mode": {
          "value": 0.01252
        },
        "modeSelector": {
          "value": 3
        },
        "mult": {
          "value": 1
        },
        "playback": {
          "value": 2070.5882352941176
        },
        "rainDelayTime": {
          "value": 2000
        },
        "rainGain": {
          "value": 20
        },
        "release": {
          "value": 246.66666666666666
        },
        "skewBrighten": {
          "value": 0.333333333333333
        },
        "sustain": {
          "value": 0.16
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.428571428571429
        }
      }
    },
    {
      "name": "5-101[14]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.8
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.8
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.8
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.8
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 117.98125
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 50
        },
        "delaytimeL": {
          "value": 437
        },
        "delaytimeR": {
          "value": 460
        },
        "filterFrequency": {
          "value": 1085
        },
        "modFreq1": {
          "value": 4.285714285714286
        },
        "modFreq2": {
          "value": 2.571428571428571
        },
        "modFreqDepth1": {
          "value": 0.428571428571429
        },
        "modFreqDepth2": {
          "value": 0.666666666666667
        },
        "mode": {
          "value": 0.08563
        },
        "modeSelector": {
          "value": 5
        },
        "mult": {
          "value": 4.747575757575758
        },
        "playback": {
          "value": 3750
        },
        "rainDelayTime": {
          "value": 1
        },
        "rainGain": {
          "value": 0
        },
        "release": {
          "value": 50
        },
        "skewBrighten": {
          "value": 0
        },
        "sustain": {
          "value": 0.1
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.714285714285714
        }
      }
    },
    {
      "name": "6-7[15]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 349.78125000000006
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 3609.666666666667
        },
        "delaytimeL": {
          "value": 380
        },
        "delaytimeR": {
          "value": 400
        },
        "filterFrequency": {
          "value": 20000
        },
        "modFreq1": {
          "value": 7.142857142857142
        },
        "modFreq2": {
          "value": 4.285714285714285
        },
        "modFreqDepth1": {
          "value": 0.714285714285714
        },
        "modFreqDepth2": {
          "value": 0.5
        },
        "mode": {
          "value": 0.05504
        },
        "modeSelector": {
          "value": 6
        },
        "mult": {
          "value": 92.88333333333334
        },
        "playback": {
          "value": 6367.647058823529
        },
        "rainDelayTime": {
          "value": 1
        },
        "rainGain": {
          "value": 0
        },
        "release": {
          "value": 3609.666666666667
        },
        "skewBrighten": {
          "value": 0.9
        },
        "sustain": {
          "value": 1
        },
        "volumeGain": {
          "value": 0.7000000000000001
        },
        "waveSelect": {
          "value": 0.857142857142857
        }
      }
    },
    {
      "name": "4-1[16]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 268.79375000000005
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 148.33333333333331
        },
        "delaytimeL": {
          "value": 361
        },
        "delaytimeR": {
          "value": 380
        },
        "filterFrequency": {
          "value": 2450
        },
        "modFreq1": {
          "value": 0
        },
        "modFreq2": {
          "value": 0
        },
        "modFreqDepth1": {
          "value": 0
        },
        "modFreqDepth2": {
          "value": 0.166666666666667
        },
        "mode": {
          "value": 0.03269
        },
        "modeSelector": {
          "value": 4
        },
        "mult": {
          "value": 62.09
        },
        "playback": {
          "value": 3882.3529411764703
        },
        "rainDelayTime": {
          "value": 200
        },
        "rainGain": {
          "value": 2
        },
        "release": {
          "value": 148.33333333333331
        },
        "skewBrighten": {
          "value": 0.9
        },
        "sustain": {
          "value": 0.13
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.571428571428571
        }
      }
    },
    {
      "name": "3-7[17]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.2
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 74.75625
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 1761.0000000000002
        },
        "delaytimeL": {
          "value": 665.0000000000001
        },
        "delaytimeR": {
          "value": 700.0000000000001
        },
        "filterFrequency": {
          "value": 12785
        },
        "modFreq1": {
          "value": 0
        },
        "modFreq2": {
          "value": 0
        },
        "modFreqDepth1": {
          "value": 0
        },
        "modFreqDepth2": {
          "value": 0
        },
        "mode": {
          "value": 0.02319
        },
        "modeSelector": {
          "value": 3
        },
        "mult": {
          "value": 1
        },
        "playback": {
          "value": 2270.5882352941176
        },
        "rainDelayTime": {
          "value": 780
        },
        "rainGain": {
          "value": 7.800000000000001
        },
        "release": {
          "value": 1761.0000000000002
        },
        "skewBrighten": {
          "value": 0.9
        },
        "sustain": {
          "value": 0.622
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.428571428571429
        }
      }
    },
    {
      "name": "7-22[19]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.333333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.333333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.333333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.333333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 108.60000000000001
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 3314.6666666666665
        },
        "delaytimeL": {
          "value": 513
        },
        "delaytimeR": {
          "value": 540
        },
        "filterFrequency": {
          "value": 20000
        },
        "modFreq1": {
          "value": 5.714285714285714
        },
        "modFreq2": {
          "value": 3.428571428571428
        },
        "modFreqDepth1": {
          "value": 0.571428571428571
        },
        "modFreqDepth2": {
          "value": 0.333333333333333
        },
        "mode": {
          "value": 0.01493
        },
        "modeSelector": {
          "value": 7
        },
        "mult": {
          "value": 1.180606060606061
        },
        "playback": {
          "value": 2288.235294117647
        },
        "rainDelayTime": {
          "value": 1
        },
        "rainGain": {
          "value": 0
        },
        "release": {
          "value": 3314.6666666666665
        },
        "skewBrighten": {
          "value": 0.9
        },
        "sustain": {
          "value": 1
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 1
        }
      }
    },
    {
      "name": "3-77[18]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.733333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.733333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.733333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.733333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 58.724999999999994
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 89.33333333333334
        },
        "delaytimeL": {
          "value": 665.0000000000001
        },
        "delaytimeR": {
          "value": 700.0000000000001
        },
        "filterFrequency": {
          "value": 955
        },
        "modFreq1": {
          "value": 4.285714285714286
        },
        "modFreq2": {
          "value": 2.571428571428571
        },
        "modFreqDepth1": {
          "value": 0.428571428571429
        },
        "modFreqDepth2": {
          "value": 0.666666666666667
        },
        "mode": {
          "value": 0.00419
        },
        "modeSelector": {
          "value": 3
        },
        "mult": {
          "value": 1
        },
        "playback": {
          "value": 2023.5294117647059
        },
        "rainDelayTime": {
          "value": 1100
        },
        "rainGain": {
          "value": 11
        },
        "release": {
          "value": 89.33333333333334
        },
        "skewBrighten": {
          "value": 0
        },
        "sustain": {
          "value": 0.112
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.428571428571429
        }
      }
    },
    {
      "name": "7-53[20]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.6
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.6
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.6
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.6
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 117.74375
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 1525
        },
        "delaytimeL": {
          "value": 513
        },
        "delaytimeR": {
          "value": 540
        },
        "filterFrequency": {
          "value": 3750.0000000000005
        },
        "modFreq1": {
          "value": 10
        },
        "modFreq2": {
          "value": 6
        },
        "modFreqDepth1": {
          "value": 1
        },
        "modFreqDepth2": {
          "value": 0.666666666666667
        },
        "mode": {
          "value": 0.02268
        },
        "modeSelector": {
          "value": 7
        },
        "mult": {
          "value": 4.657272727272725
        },
        "playback": {
          "value": 2452.9411764705883
        },
        "rainDelayTime": {
          "value": 1
        },
        "rainGain": {
          "value": 0
        },
        "release": {
          "value": 1525
        },
        "skewBrighten": {
          "value": 0.9
        },
        "sustain": {
          "value": 0.55
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 1
        }
      }
    },
    {
      "name": "4-15[21]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.266666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.266666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.266666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.266666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 223.43125000000003
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 738.3333333333334
        },
        "delaytimeL": {
          "value": 361
        },
        "delaytimeR": {
          "value": 380
        },
        "filterFrequency": {
          "value": 8365
        },
        "modFreq1": {
          "value": 1.428571428571428
        },
        "modFreq2": {
          "value": 0.857142857142857
        },
        "modFreqDepth1": {
          "value": 0.142857142857143
        },
        "modFreqDepth2": {
          "value": 0.166666666666667
        },
        "mode": {
          "value": 0.02589
        },
        "modeSelector": {
          "value": 4
        },
        "mult": {
          "value": 44.842121212121214
        },
        "playback": {
          "value": 3176.4705882352937
        },
        "rainDelayTime": {
          "value": 1
        },
        "rainGain": {
          "value": 0
        },
        "release": {
          "value": 738.3333333333334
        },
        "skewBrighten": {
          "value": 0.9
        },
        "sustain": {
          "value": 0.31
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.571428571428571
        }
      }
    },
    {
      "name": "4-20[22]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.333333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.333333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.333333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.333333333333333
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 171.65625
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 1741.3333333333335
        },
        "delaytimeL": {
          "value": 361
        },
        "delaytimeR": {
          "value": 380
        },
        "filterFrequency": {
          "value": 15060
        },
        "modFreq1": {
          "value": 1.428571428571428
        },
        "modFreq2": {
          "value": 0.857142857142857
        },
        "modFreqDepth1": {
          "value": 0.142857142857143
        },
        "modFreqDepth2": {
          "value": 0.166666666666667
        },
        "mode": {
          "value": 0.01485
        },
        "modeSelector": {
          "value": 4
        },
        "mult": {
          "value": 25.156060606060606
        },
        "playback": {
          "value": 2494.1176470588234
        },
        "rainDelayTime": {
          "value": 1
        },
        "rainGain": {
          "value": 0
        },
        "release": {
          "value": 1741.3333333333335
        },
        "skewBrighten": {
          "value": 0.9
        },
        "sustain": {
          "value": 0.616
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.571428571428571
        }
      }
    },
    {
      "name": "4-61[23]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.666666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.666666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.666666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.666666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 104.91875
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 797.3333333333334
        },
        "delaytimeL": {
          "value": 361
        },
        "delaytimeR": {
          "value": 380
        },
        "filterFrequency": {
          "value": 3880
        },
        "modFreq1": {
          "value": 5.714285714285714
        },
        "modFreq2": {
          "value": 3.428571428571428
        },
        "modFreqDepth1": {
          "value": 0.571428571428571
        },
        "modFreqDepth2": {
          "value": 1
        },
        "mode": {
          "value": 0.01012
        },
        "modeSelector": {
          "value": 4
        },
        "mult": {
          "value": 1
        },
        "playback": {
          "value": 2176.470588235294
        },
        "rainDelayTime": {
          "value": 1
        },
        "rainGain": {
          "value": 0
        },
        "release": {
          "value": 797.3333333333334
        },
        "skewBrighten": {
          "value": 0.9
        },
        "sustain": {
          "value": 0.328
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 0.571428571428571
        }
      }
    },
    {
      "name": "7-31[24]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.4
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.4
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.4
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.4
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 112.87500000000001
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 1997
        },
        "delaytimeL": {
          "value": 513
        },
        "delaytimeR": {
          "value": 540
        },
        "filterFrequency": {
          "value": 16490
        },
        "modFreq1": {
          "value": 7.142857142857142
        },
        "modFreq2": {
          "value": 4.285714285714285
        },
        "modFreqDepth1": {
          "value": 0.714285714285714
        },
        "modFreqDepth2": {
          "value": 0.666666666666667
        },
        "mode": {
          "value": 0.0154
        },
        "modeSelector": {
          "value": 7
        },
        "mult": {
          "value": 2.806060606060607
        },
        "playback": {
          "value": 2308.823529411765
        },
        "rainDelayTime": {
          "value": 1
        },
        "rainGain": {
          "value": 0
        },
        "release": {
          "value": 1997
        },
        "skewBrighten": {
          "value": 0.9
        },
        "sustain": {
          "value": 0.694
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 1
        }
      }
    },
    {
      "name": "7-63[25]",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.666666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.666666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.666666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            },
            {
              "__sps": {
                "compressor": {},
                "compressor[1]": {},
                "p_obj-11": {
                  "__sps": {
                    "p_obj-25": {}
                  },
                  "offset": {
                    "value": 0.666666666666667
                  },
                  "res": {
                    "value": 0.5
                  }
                },
                "rainStereoDelay": {},
                "sequence": {},
                "stereoDelay": {}
              }
            }
          ]
        },
        "attack": {
          "value": 102.1875
        },
        "compressorAttack": {
          "value": 20
        },
        "compressorInputGain": {
          "value": 4
        },
        "compressorParallel_mix": {
          "value": 1
        },
        "compressorRatio": {
          "value": 7
        },
        "compressorRelease": {
          "value": 500
        },
        "compressorThreshold": {
          "value": -37
        },
        "decay": {
          "value": 1485.6666666666667
        },
        "delaytimeL": {
          "value": 513
        },
        "delaytimeR": {
          "value": 540
        },
        "filterFrequency": {
          "value": 2255
        },
        "modFreq1": {
          "value": 10
        },
        "modFreq2": {
          "value": 6
        },
        "modFreqDepth1": {
          "value": 1
        },
        "modFreqDepth2": {
          "value": 0.666666666666667
        },
        "mode": {
          "value": 0.02268
        },
        "modeSelector": {
          "value": 7
        },
        "mult": {
          "value": 1
        },
        "playback": {
          "value": 2388.235294117647
        },
        "rainDelayTime": {
          "value": 1
        },
        "rainGain": {
          "value": 0
        },
        "release": {
          "value": 1485.6666666666667
        },
        "skewBrighten": {
          "value": 0.9
        },
        "sustain": {
          "value": 0.538
        },
        "volumeGain": {
          "value": 0.75
        },
        "waveSelect": {
          "value": 1
        }
      }
    }
  ],
  "src": [
    {
      "code": "",
      "compression": "zlib",
      "encoding": "base64",
      "type": "wasm"
    }
  ]
}